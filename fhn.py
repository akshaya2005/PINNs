{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c9adc34d-e291-49ea-9d4d-894d99192da9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1de87c99-8fb6-4ae3-a509-50acd5a0b915",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def simulate_excitable_system(alpha, beta, eps, gamma, delta, dt, endtime):\n",
    "  \"\"\"\n",
    "  Simulates an excitable system using a system of ordinary differential equations.\n",
    "\n",
    "  Args:\n",
    "      alpha: Parameter defining the behavior of the system.\n",
    "      beta: Parameter defining the behavior of the system.\n",
    "      eps: Parameter defining the behavior of the system.\n",
    "      gamma: Parameter defining the behavior of the system.\n",
    "      delta: Parameter defining the behavior of the system.\n",
    "      dt: Time step for numerical integration.\n",
    "      endtime: Total simulation time.\n",
    "\n",
    "  Returns:\n",
    "      usave: Array storing the values of u over time.\n",
    "      vsave: Array storing the values of v over time.\n",
    "  \"\"\"\n",
    "\n",
    "  nsteps = int(math.ceil(endtime / dt))  # Calculate number of steps\n",
    "  usave = np.zeros(nsteps + 1)  # Array to store u (initialize with zeros)\n",
    "  vsave = np.zeros(nsteps + 1)  # Array to store v (initialize with zeros)\n",
    "\n",
    "  # Initial values\n",
    "  usave[0] = 0.25\n",
    "  vsave[0] = 0.0\n",
    "\n",
    "  for ntime in range(1, nsteps + 1):\n",
    "    # Update rates of change\n",
    "    du = usave[ntime - 1] * (1 - usave[ntime - 1]) * (usave[ntime - 1] - alpha) - vsave[ntime - 1]\n",
    "    dv = eps * (beta * usave[ntime - 1] - gamma * vsave[ntime - 1] - delta)\n",
    "\n",
    "    # Update state variables\n",
    "    usave[ntime] = usave[ntime - 1] + dt * du\n",
    "    vsave[ntime] = vsave[ntime - 1] + dt * dv\n",
    "\n",
    "  return usave, vsave\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "38cdf95c-a51f-47c0-acca-92472c9942f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10001,) (10001,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1966a63c290>]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example usage\n",
    "alpha = 0.1\n",
    "beta = 0.5\n",
    "eps = 0.01\n",
    "gamma = 1\n",
    "delta = 0.1\n",
    "dt = 0.1\n",
    "endtime = 1000\n",
    "u, v = simulate_excitable_system(alpha, beta, eps, gamma, delta, dt, endtime)\n",
    "print(u.shape, v.shape)\n",
    "\n",
    "plt.plot(v, u, color=\"red\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9291bb5f-cc40-40a1-a0c4-08d3ef211fb1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
